name: Build & Release

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0, v2.1.3, etc.
  workflow_dispatch:  # Allow manual triggering
    inputs:
      tag:
        description: 'Tag to build (e.g., v1.0.0)'
        required: false
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    name: 🏗️ Build & Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image: ${{ steps.image.outputs.image }}
      version: ${{ steps.image.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event.inputs.tag || github.ref }}

      - name: Set up Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '20'

      - name: Install dependencies
        run: yarn install --immutable

      - name: Run type check
        run: yarn tsc

      - name: Run linter
        run: yarn lint:all

      - name: Build backend
        run: yarn build:backend

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ github.event.inputs.tag }},enable=${{ github.event_name == 'workflow_dispatch' && github.event.inputs.tag != '' }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./packages/backend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Output image and version
        id: image
        run: |
          FIRST_TAG="$(echo "${{ steps.meta.outputs.tags }}" | head -n1)"
          if [ -z "$FIRST_TAG" ]; then
            echo "No tags generated by metadata-action" >&2
            exit 1
          fi
          echo "image=$FIRST_TAG" >> "$GITHUB_OUTPUT"
          echo "version=${FIRST_TAG##*:}" >> "$GITHUB_OUTPUT"
  create-release:
    name: 📦 Create GitHub Release
    needs: build-and-push
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: startsWith(github.ref, 'refs/tags/')  # Only create release for tag pushes, not manual runs
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Full history for changelog generation

      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous tag (using ref_name for the tag name, not the full ref)
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 "${{ github.ref_name }}^" 2>/dev/null || echo "")
          
          if [ -z "$PREVIOUS_TAG" ]; then
            echo "No previous tag found, showing all commits"
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            echo "Generating changelog from $PREVIOUS_TAG to ${{ github.ref_name }}"
            CHANGELOG=$(git log $PREVIOUS_TAG..${{ github.ref }} --pretty=format:"- %s (%h)" --no-merges)
          fi
          
          # Save previous tag for later
          echo "PREVIOUS_TAG=$PREVIOUS_TAG" >> $GITHUB_ENV
          
          # Group commits by type
          cat << EOF > CHANGELOG.md
          ## 🚀 What's Changed
          
          ### ✨ Features
          $(echo "$CHANGELOG" | grep -E "^- feat(\(.*\))?:" || echo "- No new features")
          
          ### 🐛 Bug Fixes
          $(echo "$CHANGELOG" | grep -E "^- fix(\(.*\))?:" || echo "- No bug fixes")
          
          ### 📚 Documentation
          $(echo "$CHANGELOG" | grep -E "^- docs(\(.*\))?:" || echo "- No documentation changes")
          
          ### 🔧 Other Changes
          $(echo "$CHANGELOG" | grep -vE "^- (feat|fix|docs)(\(.*\))?:" || echo "- No other changes")
          
          ## 🐳 Docker Image
          
          Pull the image:
          \`\`\`bash
          docker pull ${{ needs.build-and-push.outputs.image }}
          \`\`\`
          
          ## 🚢 Deployment
          
          The deployment workflow can be triggered:
          - Automatically via the \`workflow_call\` event
          - Manually from the Actions tab
          - From another repository using a GitHub token
          
          To manually deploy this version:
          \`\`\`bash
          # Update your .env.kubernetes with the new image
          export DOCKER_IMAGE=${{ needs.build-and-push.outputs.image }}
          
          # Run the deployment script
          ./kubernetes-deploy.sh
          \`\`\`
          
          ---
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/${PREVIOUS_TAG}...${{ github.ref_name }}
          EOF

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          body_path: CHANGELOG.md
          draft: false
          prerelease: ${{ contains(github.ref_name, '-') }}
          generate_release_notes: false  # We're using our own changelog
          name: Release ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
  trigger-deployment:
    name: 🔄 Trigger Deployment
    needs: [build-and-push, create-release]
    if: success() && !contains(github.ref_name, '-')
    uses: ./.github/workflows/deploy.yml
    with:
      image: ${{ needs.build-and-push.outputs.image }}
      environment: production
    secrets: inherit