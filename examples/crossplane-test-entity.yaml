---
# Example entity with Crossplane annotations for testing
apiVersion: backstage.io/v1alpha1
kind: Component
metadata:
  name: payment-service-with-crossplane
  title: Payment Service (with Crossplane Infrastructure)
  description: Example service with Crossplane-managed infrastructure
  annotations:
    # Crossplane v2 annotations (XRs) - your current setup
    crossplane.io/xr-name: payment-database-xyz
    crossplane.io/xr-namespace: team-backend
    crossplane.terasky.io/xr-apiversion: database.platform.io/v1alpha1
    crossplane.terasky.io/xr-kind: XPostgreSQLInstance
    
    # Alternative: Crossplane v1 annotations (Claims) - for backward compatibility
    # crossplane.io/claim-name: payment-database
    # crossplane.io/claim-namespace: team-backend
    
    # General flag to indicate this has Crossplane resources
    backstage.io/has-crossplane-resources: "true"
    
    # Standard Backstage annotations
    backstage.io/kubernetes-id: payment-service
    backstage.io/kubernetes-namespace: team-backend
spec:
  type: service
  lifecycle: production
  owner: team-backend
  system: payment-platform
---
# Another example with different annotations
apiVersion: backstage.io/v1alpha1
kind: Component
metadata:
  name: inventory-service-with-database
  title: Inventory Service
  description: Service with Crossplane-managed MongoDB
  annotations:
    # Using TeraSky-specific annotations
    crossplane.terasky.io/xr-name: inventory-mongodb-abc
    crossplane.terasky.io/xr-apiversion: database.platform.io/v1alpha1
    crossplane.terasky.io/xr-kind: XMongoDBInstance
    
    # Kubernetes integration
    backstage.io/kubernetes-id: inventory-service
    backstage.io/kubernetes-namespace: team-inventory
spec:
  type: service
  lifecycle: production
  owner: team-inventory
  system: inventory-management